%%% -------------------------------------------------------------------
%%% Author  : uabjle
%%% Description : resource discovery accroding to OPT in Action 
%%% This service discovery is adapted to 
%%% Type = application 
%%% Instance ={ip_addr,{IP_addr,Port}}|{erlang_node,{ErlNode}}
%%% 
%%% Created : 10 dec 2012
%%% -------------------------------------------------------------------
-module(lib_provider2).
 

%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------

%% --------------------------------------------------------------------
-define(ConfigFile_ToBeChanged,"config/sys.config").

-define(DBETCD,dbetcd_appl).


%% External exports
-export([
	 new/2,
	 unique_node_name/2,
	 deployment_id/1,
	 dir/1
	]).



%% ====================================================================
%% External functions
%% ====================================================================


%%--------------------------------------------------------------------
%% @doc
%% @spec
%% @end
%%--------------------------------------------------------------------
new(ProviderSpec,HostSpec)->
    rpc:call(node(),?MODULE,local_new,[ProviderSpec,HostSpec],5*5000).
local_new(ProviderSpec,HostSpec)->
    %% Create an unique node name
    %% AppId==ProvideId, Type==provider, used when deleting 
    {ok,HostName}=inet:gethostname(),
    {ok,AppName}=sd:call(?DBETCD,db_provider_spec,read,[app_name,ProviderSpec],5000),
    {ok,App}=sd:call(?DBETCD,db_provider_spec,read,[app,ProviderSpec],5000),
 %   {ok,StartCmd}=sd:call(?DBETCD,db_provider_spec,read,[start_cmd,ProviderSpec],5000),
    {ok,GitPath}=sd:call(?DBETCD,db_provider_spec,read,[git_path,ProviderSpec],5000),
    Type="provider",
    NodeName=unique_node_name(AppName,Type),
    Dir=NodeName,
    DeploymentId=NodeName,
    CreationTime={date(),time()},
    CookieStr=atom_to_list(erlang:get_cookie()),
  
   %% TBD PaArgs needs to adjusted in db_provider_Spec 
    PaArgs="-pa "++NodeName++"/ebin"++" "++" -config "++"NodeName/config/sys.config",
    EnvArgs=" ",
    ErlArgs=PaArgs++" "++"-setcookie "++CookieStr++" "++EnvArgs,
    %% Create ErlangVm
    Result=case slave:start(HostName,NodeName,ErlArgs) of
	       {error,Reason}->
		   {error,[Reason,?MODULE,?FUNCTION_NAME,?LINE]};
	       {ok,ProviderNode}-> 
		   %% Create Dir
		   case rpc:call(ProviderNode,file,make_dir,[Dir],5000) of
		       {badrpc,Reason}->
			   {error,[badrpc,Reason,ProviderSpec,HostSpec,?MODULE,?FUNCTION_NAME,?LINE]};
		       {error,Reason}->
			   {error,[Reason,?MODULE,?FUNCTION_NAME,?LINE]};
		       ok->
			   %% Clone
			   case rpc:call(ProviderNode,os,cmd,["git clone "++GitPath++" "++Dir],5000) of
			       {badrpc,Reason}->
				   {error,[badrpc,Reason,ProviderSpec,HostSpec,?MODULE,?FUNCTION_NAME,?LINE]};
			       {error,Reason}->
				   {error,[Reason,?MODULE,?FUNCTION_NAME,?LINE]};
			       GitInfo->
				   %% Load App
				   case rpc:call(ProviderNode,application,load,[App],5000) of
				       {badrpc,Reason}->
					   {error,[badrpc,Reason,GitInfo,ProviderSpec,HostSpec,?MODULE,?FUNCTION_NAME,?LINE]};
				       {error,Reason}->
					   {error,[Reason,GitInfo,?MODULE,?FUNCTION_NAME,?LINE]};
				       ok->
					   %% start App
					   case rpc:call(ProviderNode,application,start,[App],5000) of
						{badrpc,Reason}->
						    {error,[badrpc,Reason,ProviderSpec,HostSpec,?MODULE,?FUNCTION_NAME,?LINE]};
					       {error,Reason}->
						   {error,[Reason,?MODULE,?FUNCTION_NAME,?LINE]};
					       ok->
						   %% update dbase
						   case sd:call(?DBETCD,db_deploy,create,[DeploymentId,ProviderSpec,ProviderNode,Dir,CreationTime],2*5000) of
						       {error,Reason}->
							   {error,[Reason,?MODULE,?FUNCTION_NAME,?LINE]};
						       ok->
							   {ok,DeploymentId,ProviderSpec,ProviderNode,Dir,CreationTime}
						   end
					   end
				   end
			   end
		   end
	   end,
    Result.

%%--------------------------------------------------------------------
%% @doc
%% @spec
%% @end
%%--------------------------------------------------------------------
delete(DeploymentId)->
    Result=case sd:call(?DBETCD,db_deploy,is_member,[DeploymentId],2*5000) of
	       false->
		   {error,["Not exists ",DeploymentId,?MODULE,?FUNCTION_NAME,?LINE]};
	       true ->
		   case 
		   case sd:call(?DBETCD,db_deploy,create,[DeploymentId,ProviderSpec,ProviderNode,Dir,CreationTime],2*5000) of
						       {error,Reason}->
							   {error,[Reason,?MODULE,?FUNCTION_NAME,?LINE]};
						       ok->
%%--------------------------------------------------------------------
%% @doc
%% @spec
%% @end
%%--------------------------------------------------------------------
unique_node_name(AppId,Type)->
    Unique=integer_to_list(os:system_time(),36),
    {ok,AppId++"_"++Unique++"_"++Type}.
%%--------------------------------------------------------------------
%% @doc
%% @spec
%% @end
%%--------------------------------------------------------------------
deployment_id(Node)->
    NodeStr=atom_to_list(Node),
    [DeploymentId,_HostName]=string:tokens(NodeStr,"@"),
    {ok,DeploymentId}.
%%--------------------------------------------------------------------
%% @doc
%% @spec
%% @end
%%--------------------------------------------------------------------
dir(Node)->
    NodeStr=atom_to_list(Node),
    [Dir,_HostName]=string:tokens(NodeStr,"@"),
    {ok,Dir}.


%%--------------------------------------------------------------------
%% @doc
%% @spec
%% @end
%%--------------------------------------------------------------------
